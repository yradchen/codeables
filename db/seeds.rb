Instruction.delete_all
Project.delete_all
Comment.delete_all
User.delete_all
#

guest = User.create!({username: "Guest", password: "wizardhat1", email: "some@guestlogin.fake"})
guest2 = User.create!({username: "John Smith", password: 'wizardhat2', email: "something@gu22es23tlogin.fake2"})
dan = User.create({username: "Daniel", password: 'Ilovealerts', email: "nothing@none.net"})
colson = User.create({username: "Mr. Colson", password: 'Ilovealerts2', email: "w2hat@n3one.net"})



jquery = Project.create({title: "jQuery 101", description: "Credit to http://www.codeconquest.com/tutorials/jquery/ for the source material.\r\n\r\njQuery is a JavaScript library, according to the official documentation.\r\n\r\nMany refer to it as a JavaScript framework, however, library is the correct term to use when describing it. As to why we’ll get to the difference between those two terms in a bit.\r\n\r\nFor now, all you need to know is that jQuery is designed to make working with JavaScript much easier, primarily when it comes to building websites.\r\n\r\nBecause of that, it’s important that you understand when you’re working with jQuery you are, in fact, writing in JavaScript. jQuery is not meant to replace JavaScript, nor does it act as a substitute. Instead, it’s only meant to enhance use of the language.\r\n\r\njQuery is structured so that you can call upon functions with a single line of code. If you were working with just JavaScript, you would have to write many lines of code to do the same thing. However, jQuery wraps all the general coding of a function into one package – which is why many refer to it as a framework – so that you can write programs and apps easily and more efficiently.\r\n\r\nThat said, you do not need to be an expert in JavaScript to work with jQuery. This is because it is designed to simplify working with the language, by shortening several complicated processes; like AJAX calls and DOM manipulation.\r\n\r\nIn terms of a framework, jQuery is not the only library of its kind. There are many other JavaScript frameworks that developers can use when building websites and apps.\r\n\r\nWhat makes jQuery so popular, is that it’s remarkably powerful, has a wide range of plugins and commands, and is easy to use and read. One could even go so far as to say that jQuery syntax is attractive.\r\n\r\n", user_id: guest.id, cover_img: "https://s3.amazonaws.com/codeables-DEV/seeds/jquery-logo.png", publish: true})


Instruction.create!({step_title: "How is jQuery Used?", step_detail: "jQuery is most commonly used as a client-side scripting language for web applications and web development. This means that it is added alongside HTML and CSS, located on the client side of a web page as opposed to the server side.\r\n\r\nWhen a visitor lands on a webpage that uses JavaScript, the script is sent to the browser and that is when it is executed. In essence, the browser is what does the work with the script.\r\n\r\nIn layman’s terms, jQuery is used to spruce up the interface or interactions on a website. This can happen through user input fields, larger forms, pop-up windows and notifications, and much more.", project_id: jquery.id})

how_to = Project.create!({title: "How to write a codeable", description: "The following instructions will teach you how to write a Codeable. A Codeable is essentially anything that can be made using code. This can range from full games or websites, to features or even just projects, such as how to make something using a Raspberry Pi!", user_id: guest.id, cover_img: "https://s3.amazonaws.com/codeables-DEV/seeds/how_to_use_box.gif", publish: true})

Instruction.create!({step_title: "Step 1: Start the project", step_detail: "After logging in click the little 'You' dropdown menu from the top right menu and select 'New Codeable' or Draft Codeables to edit existing but not yet published ones.", project_id: how_to.id, media: "https://s3.amazonaws.com/codeables-DEV/seeds/step_one.png"})

Instruction.create!({step_title: "Step 2: Entering a title and the overview page.", step_detail: "At this point a pop-up will appear and ask you to enter a title (don't worry you can edit this later). Enter a title!\r\n\r\nThe overview page will have the following buttons;\r\n\r\nPublish - Allows you to toggle the published state of your project. This will make the project visible to other users on Codeables.\r\n\r\nClick Here to Edit - Will take you to a form to edit a particular section or step in your project.\r\n\r\nAdd Step - Add a step to your project which will allow for a step title, description and image.\r\n\r\nX - Visible on the bottom right of a step when you hover over it (excluding the intro step). This allows you to delete a step from your project.", project_id: how_to.id, media: "https://s3.amazonaws.com/codeables-DEV/seeds/edit_overview.png"})

Instruction.create!({step_title: "Step 3: Intro edit page", step_detail: "The next step is to work on the projects introduction. Click on the first 'Click Here to Edit'.\r\n\r\nOn this page you will have the following options;\r\n\r\nClick to Add File -This allows you to edit the cover image. This is the first image users will see on the homepage when looking through projects as well as the first image that is visible when viewing your project.\r\n\r\nTitle field - This will be the title of your project, which will be visible on the Codeables homepage. \r\n\r\nDescription Field - this is the larger textfield below the title field and will be in a smaller font than the title field. This field should be used to give an overview of your project. \r\n\r\nClick to Save File - This will allow you to save your work and redirect you back to the project overview page. ", project_id: how_to.id, media: "https://s3.amazonaws.com/codeables-DEV/seeds/edit_form.png"})

Instruction.create!({step_title: "Step 4: Step edit page", step_detail: "After adding and introduction, description and cover image, it's time to add some steps to your project.\r\n\r\nClick the Add Step button and then click on it's 'Click Here to Edit' button.\r\n\r\nThis will take you to a form that's identical to your introduction edit form. While these forms are the same they serve different purposes. The purpose of the step form is to inform users on what to do at this particular stage of their project. Ask yourself, what does my user have to do now? Guide the other users through the steps of completing your project. Pictures are NOT necessary for this part but they do help!", project_id: how_to.id})

Instruction.create!({step_title: "Step 5: Publishing your project or working on it later", step_detail: "If you're finished with your Codeable you can click publish. Otherwise, can always come back to it by clicking on the 'You' and click 'Draft Codeables' to view unpublished Codeables and work on them at a later date.", project_id: how_to.id})


ruby = Project.create!({title: "Ruby 101", description: "Credit to http://www.codeconquest.com/tutorials/ruby/programming-projects-for-beginners/ for the source material!\r\n\r\nFirst, we need to open a terminal or command prompt so that we can work with the code. After you have installed Ruby, open up the IRb shell.\r\n\r\nIf you’re using Mac OS X you can do this by opening up the Terminal typing “irb”, then pressing enter.\r\nIf you’re using Linux, then open up a shell, type “irb”, and press enter.\r\nIf you’re using Windows, you open Interactive Ruby from the Ruby section of your Start Menu OR you can open a command prompt, type “irb” and then press enter.", user_id: guest.id, cover_img: "https://s3.amazonaws.com/codeables-DEV/seeds/ruby.png", publish: true})

Instruction.create!({step_title: "Hello World", step_detail: "As you probably already know, one of the first things you will learn to do with any language is how to output the text, “hello world.” We’re going to do the same thing here, but be sure to take note of how easy that is to do with Ruby.\r\n\r\nAfter you’ve opened the IRb shell, just type the following into the prompt:\r\n\r\nputs \"Hello World\"\r\nWhen you press enter, the terminal should return the following:\r\n\r\n\r\nHello World\r\n=> nil\r\n\r\n\r\nThe “Hello World” part is obviously the text that we asked the shell to output. The “nil” is the result of the expression, or the shell telling us that the final value is absolutely nothing.\r\n\r\nIf you’re wondering whether or not that means we can use the shell and Ruby code as a basic calculator, then the answer is yes.\r\n\r\nType any simple equation into the terminal, and press enter to see the result. For example:\r\n\r\n\r\nirb(main):003:0> 7+2\r\n=> 9\r\n\r\n\r\nCongratulations! You know how to work with the Ruby shell now!", project_id: ruby.id})

Instruction.create!({step_title: "Defining Methods", step_detail: "In Ruby, we can define methods to make things a little simpler. This is like a basic function, where we give the method a name – which will be used to call it – and then give it something to do.\r\n\r\nFor example, let’s start with this:\r\n\r\n\r\ndef method\r\n    puts \"Yay! This is our method!\"\r\nend\r\n\r\n\r\nIn the code snippet above, we are defining a method called “method,” which will output the message “yay, this is our method,” after which it will end.\r\n\r\nWant to know how to activate the method? It’s simple.\r\n\r\nType the name of your defined method like so:\r\n\r\n\r\nmethod\r\nYay! This is our method!\r\n=> null\r\n\r\n\r\nThat was pretty easy, right?\r\n\r\nLet’s create a new method that asks the user for some personal information! In this way, we can make our final program (which is what the compiled code is) interactive.\r\n\r\nYou start by defining a method, and then asking it to prompt the user, like so:\r\n\r\n\r\ndef hello\r\n    puts \"Hello \#{name}! Have a good day!\"\r\nend\r\n\r\n\r\nWhen you call your method using this snippet, it will pause and ask you to input a name. Go ahead and enter any name you want in place of Bob’s. It should look something like the following when you run the code.\r\n\r\nhello (\"Bob\")\r\nHello Bob! Have a good day!\r\n=> nil\r\n\r\n\r\nNotice how we also defined the name that would be used by our method in parenthesis? You will need to do this, as well.\r\n\r\nIf you see the same output as the one above – with your name instead of Bob’s – then you’ve done it right! Congratulations, again! You’re one step closer to becoming a Ruby pro.", project_id: ruby.id, media: "https://s3.amazonaws.com/codeables-DEV/seeds/methods.jpg"})

Instruction.create!({step_title: "Working with Classes and Creating an Object", step_detail: "Last, but not least, we’re going to learn how to work with classes and objects to store information. We’re going to do this by creating a simple AI program that will greet us by name and tell us farewell when it’s done.\r\n\r\nFirst, we’re going to create the class that will include the methods (instructions) for our AI. The code to do that is the following:\r\n\r\n\r\nclass Greeter\r\n     def initialize(name = \"AI\")\r\n     @name = name\r\n     end\r\n          def hello\r\n          puts \"Hey \#{@name}!\"\r\n          end\r\n               def goodbye\r\n               puts \"Bye \#{@name}, have a good day! Come back and talk soon.\"\r\n               end\r\nend\r\n=> nil\r\n\r\n\r\n\r\nOur class is called “Greeter” and below that are our methods that will take place when we activate that class.\r\n\r\nTo make this work the way we want, however, we need to create an object called “Greeter” which is the same name as our class.\r\n\r\ngreeter = Greeter.new(\"Bob\")\r\n=> #<Greeter:0x16cac @name=\"Bob\">\r\n\r\n\r\nIn this object we are telling the AI our name is “Bob” so if you want to use a different name swap out Bob’s (obviously).\r\n\r\nNow our object will remember the name we entered.\r\n\r\nLet’s give our program a try!\r\n\r\ngreeter.hello\r\nHey Bob!\r\n=> nil\r\n\r\n\r\nWorks great! Now let’s make it say goodbye!\r\n\r\ngreeter.goodbye\r\nBye Bob, have a good day! Come back and talk soon.\r\n=> nil\r\n\r\nSweet! We’re getting good at this, huh?", project_id: ruby.id, media: "https://s3.amazonaws.com/codeables-DEV/seeds/Nav-classes.jpg"})



sql = Project.create!({title: "SQL 101", description: "Credit to http://www.codeconquest.com/tutorials/mysql/ for the source material\r\n\r\nBefore you can fully understand what MySQL is, we need to define what a computer database is. They are in direct relation to one another.", user_id: guest.id, cover_img:"https://s3.amazonaws.com/codeables-DEV/seeds/sql.png", publish: true})

Instruction.create!({step_title: "What Is a Database?", step_detail: "In simple terms, a database is nothing more than a collection of data. Specialized software – like MySQL – is designed to collect that data, and handle the storage and retrieval processes in an extremely efficient manner.\r\n\r\nDatabases exist to handle the organization and facilitation of great amounts of data. The data contained within them can be just about anything from a list of customers and their shipping addresses to personal info for students enrolled in a class, and more.", project_id: sql.id, media:"https://s3.amazonaws.com/codeables-DEV/seeds/database.jpeg"})

Instruction.create!({step_title: "What is SQL?", step_detail: "SQL, often pronounced “sequel,” is a computer programming language that database software – like MySQL – uses. A variety of computer platforms – especially web-based apps like blogs, CMS systems, and photo galleries – must be able to store and retrieve data in order to operate fully.\r\n\r\nFor example, a CMS or content management platform like WordPress must store and retrieve a wide variety of data. When visitors navigate to your site, it must be able to retrieve stored posts (articles) that you’ve written along with any content associated with them, including images. It does this, through SQL, MySQL, and database software.", project_id: sql.id})

Instruction.create!({step_title: "So, What is MySQL?", step_detail: "MySQL is the database software used to carry out the data storage and retrieval. To clarify, MySQL is the software, SQL is the language, and both of these elements work together to create and manage a computer database.\r\n\r\nIn technical terms, it is an open-source relational database management system or RDBMS.\r\n\r\nMySQL is not the only database software that developers can use. There are other options like PostgreSQL. Both of these database software tools are incredibly popular because they are free. This is why you see a great deal of hosting providers advertising support for MySQL and PostgreSQL.\r\n\r\nAs we already established above, a majority of web applications like WordPress require the use of computer databases and related software to store and retrieve data.", project_id: sql.id, media: "https://s3.amazonaws.com/codeables-DEV/seeds/MySQL.svg.png"})

Instruction.create!({step_title: "How is MySQL Used?", step_detail: "MySQL is used for many web applications to organize important data. Most applications will use a database in the following ways:\r\n\r\nTo store content for display\r\nTo save information entered into forms, such as customer info, emails and dates\r\nTo log visitor data as well as when certain actions are performed within the application\r\nSome applications and platforms that require use of database software include:\r\n\r\nCMS platforms like WordPress, Drupal, and Joomla\r\niPhone and Android Applications\r\nDesktop Software\r\nSoftware repositories\r\n", project_id: sql.id})


javaScript = Project.create({title: "JavaScript 101", description: "Credit to http://www.codeconquest.com/tutorials/javascript/ for the source material.\r\n\r\nJavaScript is a language that adds functionality and interactivity to websites. While HTML can create a web page, and CSS can customize its appearance, the page will be static. It won’t do anything.\r\n\r\nHow do you fix that? JavaScript! JavaScript makes many things possible on web pages. It responds to user events like clicks, hovers or key presses. It changes HTML, changes CSS and makes web pages interactive.\r\n\r\nLike CSS, there are three ways that JavaScript is embedded on web pages – inline, internal and external.", user_id: guest.id, cover_img: "https://s3.amazonaws.com/codeables-DEV/seeds/javascript.png", publish: true})

Instruction.create!({step_title: "Inline JavaScript", step_detail: "When embedding inline CSS in an HTML tag, websites use the style attribute. When embedding inline JavaScript however, there are a number of attributes that are used.\r\n\r\nOne of these attributes is onclick. Any JavaScript code inside an onclick attribute gets executed when the HTML element is clicked.\r\n\r\nThe inner text of the below <strong> tag is currently ‘Text’. JavaScript will change the inner text to ‘Bold Text’ when the element is clicked.\r\n\r\n", project_id: javaScript.id})

Instruction.create!({step_title: "Internal JavaScript", step_detail: "Like CSS, inline JavaScript is uncommon. Often, websites have scripts that involve multiple HTML elements, so they tend to collect them all up and place them together in one big script, using the HTML <script> tag.\r\n\r\n<script>\r\n    var num = 142857;\r\n    document.getElementById('bold').innerText = num;\r\n</script>\r\nThe <script> tag is often placed as the last element inside a website’s <body>. This is so that all the HTML elements can fully load before they get transformed by the JavaScript.", project_id: javaScript.id})

Instruction.create!({step_title: "External JavaScript", step_detail: "Often, a website will have its JavaScript in a separate file called script.js. This allows the site to use the same script on multiple web pages. Here’s how a website would link to an external JavaScript file, assuming the file name is script.js:\r\n\r\n<script src=\"script.js\"></script>\r\nLike with internal JavaScript, this tag is often placed near the end of the <body> element on a web page.\r\n\r\n", project_id: javaScript.id, media: "https://s3.amazonaws.com/codeables-DEV/seeds/external.jpg"})
